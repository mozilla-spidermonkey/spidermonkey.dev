%%{init: {"flowchart": {"defaultRenderer": "elk"}} }%%
%% Ideally we would use the elk renderer: Much better for this diagram.
%% -- However, using elk as our renderer does have downsides. Elk doesn't
%%    support dotted lines.
%% --
%% -- As well, it becomes very very wide as there's more complexity added to the
%%    diagram.

flowchart LR
    subgraph Legend
        Done
        class Done done

        GC["GC/CC"]
        class GC GC

        JIT
        class JIT JIT


        perf[/"A performance item"/]
    end

    root[SpiderMonkey Tech Tree] --> shapeIndexes[Shape Indexes]
    shapeIndexes --> taggedShapeIndexes[Tagged Shape Indexes]
    click shapeIndexes href "#shapeIndexes"
    click taggedShapeIndexes href "#taggedShapeIndexes"

    root --> inMemoryJITHints[/"In Memory JIT Hints"/] --> onDiskJITHints[/"On  Disk JIT Hints"/] --> ric[/"Reusable Inline Caches"/]
    class inMemoryJITHints done;
    click inMemoryJITHints href "https://bugzilla.mozilla.org/show_bug.cgi?id=1824772"

    class onDiskJITHints JIT;
    class ric JIT;

    click ric href "#ric"

    root --> webIDL["WebIDL For SpiderMonkey"] --> ecmaIDL["ECMA-IDL (an IDL for ECMAScript)"]
    root --> scheduling["Thread Scheduling and Integration"] -.-> offThreadDelazification[/"Off-Thread Delazification"/]
    root --> nonGCScopes["Convert Scopes from GC to non-GC things"] --> universalRelazification["Universal Relazification"]
    click universalRelazification href "#universalRelazification"

    universalRelazification --> tossBytecode["Regenerate Bytecode For Correctness"]
    tossBytecode --> optimizedBytecode["Optimized Bytecode Emission"]
    click tossBytecode href "#tossBytecode"

    root --> immutableFlag["Immutable Object Detection at Parse Time"] --> optimizedImmutableLookups[/"Optimized Immutable Lookups"/]
    click immutableFlag href "#immutableFlag"

    root --> evalCache["Redoing the Eval Cache"] --> precompiledEval[/"Precompiled Evals"/]

    root --> parallelMarking["Parallel marking"] --> concurrentMarking["Concurrent marking"]
    class parallelMarking GC
    class concurrentMarking GC

    root --> contiguousNursery["Contiguous nursery region"] --> contiguousTenuredHeap["Contiguous tenured heap region"] --> pointerCompression["Pointer Compression"] --> compressedDOM["Compressed DOM Heap"]
    class contiguousNursery GC
    class contiguousTenuredHeap GC
    class pointerCompression GC
    class compressedDOM GC

    root --> slotsAlloc["Custom slots/elements allocator"] --> dynamicGCThings["Dynamically sized GC things"]
    class slotsAlloc GC
    class dynamicGCThings GC

    root --> partialNurseryCollection["Partial nursery collection"]
    class partialNurseryCollection GC

    root --> stringPretenuring["String pretenuring"] --> stringPreAtomization["String pre-atomization"]
    class stringPretenuring GC
    class stringPreAtomization GC

    root --> weakPtrsInOptimizedCode["Use weak pointers for guards in optimized JIT code"]
    class weakPtrsInOptimizedCode GC

    root --> gcScheduling["Improve GC/CC scheduling"]
    class gcScheduling GC

    root --> cc["Cycle Collection in SpiderMonkey"] --> refCount["RefCountable Objects in SpiderMonkey"]
    class cc GC
    class refCount GC

    cc --> smHeap["SpiderMonkey Owns the Firefox Heap"] --> compressedDOM
    class smHeap GC

    inBinaryStubs[/"In-Binary CacheIR Stubs"/]
    root --> smRelocations["SpiderMonkey Relocations"]
    click smRelocations href "#smRelocations"

    frozenRuntime[/"In Binary Frozen Runtime"/]
    frozenRuntime --> bakedFirefox[/"'Instant Startup' Firefox Binaries"/]

    inBinaryStubs --> frozenRuntime
    inBinaryTrampolines[/"In-Binary Trampolines"/] --> frozenRuntime
    inBinaryBaselineInterpreter[/"In-Binary Baseline Interpreter"/] --> frozenRuntime

    root --> inBinaryCode["Embed Generated Code in Binary"] --> inBinaryStubs & inBinaryTrampolines & inBinaryBaselineInterpreter
    click inBinaryCode "#inBinaryCode"
    smRelocations -.-> inBinaryCode

    root --> stencilNav[/"In-Memory Stencil Caching (stencil-nav)"/]
    stencilNav --> onDiskStencil[/"On-Disk Stencil Caches"/]
    root --> contextFreeParsing["JSContext Free Parsing"]
    stencilNav --> contextFreeParsing
    contextFreeParsing --> streamingParsing[/"Streaming Parsing"/]
    click streamingParsing "#streamingParsing"

    streamingParsing --> networkParsing[/"Incremental Parsing of Network Chunks"/]



    %% subgraph improvedBytecode [Bytecode Improvements]
        destructuringBytecode[/"Better Bytecode for Destructuring"/]
        click destructuringBytecode "#destructuringBytecode"

        generatorBytecodeTransforms[/"Easier to optimize generator bytecode"/]
        click generatorBytecodeTransforms "#generatorBytecodeTransforms"
        root --> generatorBytecodeTransforms


        selfHostedCacheIROps["CacheIR ops backed by self-hosted code"]
        class selfHostedCacheIROps JIT
        click selfHostedCacheIROps "#selfHostedCacheIROps"

        iteratorsWithICs[/"Implement Iterator Protocol with ICs"/]
        class iteratorsWithICs JIT

        selfHostedCacheIROps --> iteratorsWithICs

        fasterForOf["Faster implementation of `for-of` "]
        class fasterForOf JIT

        fasterArrayDestructuring["Faster implementation of array destructuring "]
        class fasterArrayDestructuring JIT

        iteratorsWithICs --> fasterForOf
        iteratorsWithICs --> destructuringBytecode

        fasterArrayDestructuring["Faster implementation of array destructuring "]
        class fasterArrayDestructuring JIT

        destructuringBytecode --> fasterArrayDestructuring
    %%end
    %%root --> improvedBytecode

    lowerOverheadSelfHostedCacheIR["Lower-overhead calls for CacheIR ops backed by self-hosted code"]
    class lowerOverheadSelfHostedCacheIR JIT

    selfHostedCacheIROps --> lowerOverheadSelfHostedCacheIR

    generatorBytecodeTransforms --> resumeInWarp


    %%subgraph ionImprovements [Ion Improvements]
        shareIonICs[/"Share Ion ICs"/]
        class shareIonICs JIT
        click shareIonICs "#shareIonICs"
        root --> shareIonICs

        prepopulateIonIcs[/"Pre-populate Ion ICs offthread"/]
        class prepopulateIonIcs JIT
        click prepopulateIonIcs "#prepopulateIonIcs"
        root --> prepopulateIonIcs

        fastIonTier[/"A Fast Ion Tier"/]
        class fastIonTier JIT
        click fastIonTier "#fastIonTier"
        root --> fastIonTier

        resumeInWarp[/"Resume In Warp"/]
        class resumeInWarp JIT
        click resumeInWarp href "https://bugzilla.mozilla.org/show_bug.cgi?id=1681338"
    %%end
    %% root --> ionImprovements

    root --> midTier[/"A Mid-Tier JIT"/]
    click midTier "#midTier"
    class midTier JIT

    cacheSelfHostedJitCode["Cache self-hosted baseline JIT code per-runtime"]
    class cacheSelfHostedJitCode JIT

    cacheRegularJitCode["Cache non-self-hosted baseline JIT code per-runtime"]
    class cacheRegularJitCode JIT

    precompileBaselineICs["Precompile Baseline ICs"]
    class precompileBaselineICs JIT
    click precompileBaselineICs href "https://bugzilla.mozilla.org/show_bug.cgi?id=1357884"

    shareBaselineICs["Share precompiled baseline ICs across processes"]

    root --> cacheSelfHostedJitCode --> cacheRegularJitCode
    root --> precompileBaselineICs -->  shareBaselineICs

    shareBaselineICs -.-> inBinaryStubs

    sharePrecompiledBaselineAcrossProcesses[/"Share Precompiled Baseline JIT Code Across Processes"/]
    cacheSelfHostedJitCode --> sharePrecompiledBaselineAcrossProcesses
    shareBaselineICs --> sharePrecompiledBaselineAcrossProcesses

    inBinarySelfHostedBaseline["In-Binary Self-hosted Baseline Code"]
    inBinarySelfHostedBaseline --> frozenRuntime
    inBinaryCode --> inBinarySelfHostedBaseline
    cacheSelfHostedJitCode --> inBinarySelfHostedBaseline

    root --> selfHostedCacheIROps


    root --> selfHostedReplacement["Replace self-hosted code with a new DSL"]

    root --> crashOnOOM["Crash on OOM"]
    crashOnOOM --> simplifiedExceptions["Simplified Exceptions"]
    click simplifiedExceptions "#simplifiedExceptions"

    %% Click Handlers
    %% Example of a programatic click handler for giggles. Notice that the callback
    %% is accessed relative to `window`.
    %% click webIDL callbacks.exampleCallback

    %% As an example of how we could group projects together.
    %% Commented out for now.
    %% subgraph "Gecko Managed Runtime"
    %%     cc
    %%     smHeap
    %%     webIDL
    %%     ecmaIDL
    %% end
